<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
/*************************************************************************
* CAUTION : This TT exits your transformation & declares base class      *
*************************************************************************/


// anonymousDisposable : timing action Trigger for on dispose
	class anonymousDisposable : IDisposable
	{
		Action _disposeAction;

		public anonymousDisposable( Action disposeAction )
		{
			_disposeAction = disposeAction;
		}

		public void Dispose( )
		{
			_disposeAction();
		}
	}

// ToLiteral : set generation output to container with literalName 
// usage : using( ToLiteral( "name" ) ) { generate literal text }
	public IDisposable ToLiteral( IDictionary<string,string> container, string literalName )
	{
		int startLength = GenerationEnvironment.Length;
		return new anonymousDisposable(
			()=> {
				var text = GenerationEnvironment.ToString( startLength, GenerationEnvironment.Length-startLength );
				GenerationEnvironment.Length = startLength;
				container.Add( literalName, text );
			}
		);
	}

// Generate functions
	void Generate<T>( IEnumerable<T> seq, Action<T> action )
	{
		if( seq==null ) return;

		foreach( var item in seq )
		{
			action(item);
		}
	}

	void Generate<T>( IEnumerable<T> seq, Action<T,int> action )
	{
		if( seq==null ) return;

		int index =0;
		foreach( var item in seq )
		{
			action( item, index );
			index ++;
		}
	}

	void Generate<T>( IEnumerable<T> seq, string separator, Action<T> action )
	{
		if( seq==null ) return;

		bool cont=false;
		foreach( var item in seq )
		{
			if( cont ) Write( separator );
			action( item );
			cont = true;
		}
	}

// ToVerbatimString:  convert string value to Verbatim String Literal
	string ToVerbatimString( 
		string value )
	{
		return "@\""+ value.Replace("\"", "\"\"" ) +"\"";
	}

// C# Syntax helpers

	IDisposable BeginNamespace( string namespaceName )
	{
#>
namespace <#=namespaceName#>
{
<#+
		PushIndent("   ");
		return new anonymousDisposable(
			()=>{ 
		PopIndent();
#>
}
<#+}
		);
	}

	class ClassContext : anonymousDisposable
	{
		public readonly string ClassName;

		public ClassContext( string className, Action action ) : base( action )
		{
			ClassName = className;
		}
	}

	ClassContext BeginClass( 
		string className, 
		bool @partial=false, 
		string[] interfaces=null, 
		string access="public" )
	{
#>
<#=access#> <#=@partial?"partial":""#> class <#=className#> 
<#+
		if( interfaces!=null && interfaces.Length>=0 )
		{
#>
    : <#=string.Join(", ", interfaces )#>
<#+
		}
#>
{
<#+
		PushIndent("    ");
		return new ClassContext( className,
			() => {
				PopIndent();
#>
}
<#+			});
	}

	void DeclareConstractor( 
		ClassContext classCtx,
		IEnumerable<dynamic> parameters=null, 
		string access="public", 
		Action body=null )
	{
#>
<#=access#> <#= classCtx.ClassName#>(<#+ Generate(parameters,", ",(p)=>{#><#=p.Type#> <#=p.Name#><#+}); #>)
{
<#+
		PushIndent("    ");
		body();
		PopIndent();
#>
}
<#+
	}

	void DeclareFinalizer(
		ClassContext classCtx,
		Action body )
	{
#>
~<#=classCtx.ClassName#>()
{
<#+ 
		PushIndent("    ");
		body();
		PopIndent();
#>
}
<#+
	}

	void DeclareMethod(
		string name,
		string returnType,
		IEnumerable<dynamic> parameters=null,
		string access="public",
		Action body=null)
	{
#>
<#=access#> <#=returnType#> <#=name#>(<#+ Generate(parameters,", ",(p)=>{#><#=p.Type#> <#=p.Name#><#+}); #>)
{
<#+
	PushIndent("    ");
	body();
	PopIndent();
#>
}
<#+
	}

	void DeclareField( 
		string fieldName, 
		string typeName, 
		string access="private", 
		bool @readonly=false, 
		bool @static=false,
		Action initializer=null )
	{
#>
<#=access#> <#=@static?"static ":""#><#=@readonly?"readonly ":""#> <#=typeName#> <#=fieldName#><#=initializer==null?";":""#>
<#+
		if( initializer!=null ) { #>
    =<#+ initializer(); #>;
<#+		
		}
	}

	void DeclareConst(
		string constName,
		string typeName,
		Action value,
		string access="private" )
	{
#>
<#=access#> const <#=typeName#> <#=constName#> = <#+ value(); #>;
<#+
	}

	public void DeclareStruct( string structName, Action body)
	{
#>
public struct <#=structName#>
{
<#+
		PushIndent("    ");
		body();
		PopIndent();
#>
}
<#+

	}


	public void GenerateIfElse( Action ifCondition, Action thenPart, Action elsePart )
	{
#>
if( <#+ ifCondition(); #> )
{
<#+
		PushIndent("    ");
		thenPart();
		PopIndent();
#>
}
else
{
<#+
		PushIndent("    ");
		elsePart();
		PopIndent();
#>
}
<#+
	}

/*

BeginDisableIndent implementation.

setup
	< #@ template language="C#" inherits="TransformationBase" # >
	< #@ include file="TTCSharpUtility.tt" # >

usage

< # PushIndent( "    " ); # > 
    output indents 4 spaces
< # using( BeginDisableIndent() ) { # > 
not indent here 
< # }  end of using  # >
    output indents 4 spaces
< # PopIndent( ); # >
indent recovered

*/

	} // exits your Transformation class now

	// TrasformationBase implementation
	public abstract class TransformationBase 
	{
		public void Initialize()
		{
		}

		public abstract string TransformText();

		class IndentSave : IDisposable
		{
			internal Action<IndentSave> _recoverAction;
			internal List<int> _indentLengthsSave;
			internal string _indentTextSave;

		    public void Dispose ()
		    {
				_recoverAction(this);
		    }
		}

		public IDisposable BeginDisableIndent()
		{
			var save= new IndentSave { 
				_indentLengthsSave = new List<int>( indentLengths ),
				_indentTextSave=currentIndentField,
				_recoverAction =(s) => {
					indentLengthsField = s._indentLengthsSave;
					currentIndentField = s._indentTextSave;
				 } 
			};
			ClearIndent();
			return save;
		}

        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
#>